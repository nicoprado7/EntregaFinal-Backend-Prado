<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Productos</title>
    <link rel="stylesheet" href="/css/styles.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <h1>Lista de productos</h1>
    <ul id="products-list">
        {{#each products}}
            <li id="product-{{this._id}}">
                <div class="product-title">{{this.title}}</div>
                <img src="{{this.image}}" alt="{{this.title}}" class="product-image">
                <div class="product-description">{{this.description}}</div>
                <div class="product-price">Precio: ${{this.price}}</div>
                <div>Código: {{this.code}}</div>
                <div class="product-stock">Stock: <span id="stock-{{this._id}}">{{this.stock}}</span></div>
                <div class="product-category">Categoría: {{this.category}}</div>
                {{#if this.imagePath}}
                    <img src="{{this.imagePath}}" alt="{{this.title}}" class="product-image">
                {{/if}}
                <div class="product-buttons">
                    <div class="quantity-control">
                        <button class="decrement-button" onclick="decrementarCantidad('{{this._id}}')">-</button>
                        <span class="space" id="quantity-{{this._id}}">1</span>
                        <button class="increment-button" onclick="incrementarCantidad('{{this._id}}', {{this.stock}})">+</button>
                    </div>

                    <!-- Botón de agregar al carrito y eliminar -->
                    <button class="green-button" onclick="agregarAlCarrito('{{this._id}}', '{{this.title}}', '{{this.price}}')">Agregar al carrito</button>
                    <button onclick="eliminarProducto('{{this._id}}')">Eliminar</button>
                </div>
            </li>
        {{/each}}
    </ul>

    <!-- Paginación y Controles -->
    <div class="pagination-controls">
        {{#if data.hasPrevPage}}
            <a href="/api/products?page={{data.prevPage}}&limit={{data.limit}}&sort={{data.sort}}&query={{data.query}}">
                <button class="button-siguiente-atras">◀️ ANTERIOR</button>
            </a>
        {{/if}}
        
        <!-- Botones de Orden -->
        <a href="/api/products?page={{data.page}}&limit={{data.limit}}&sort=asc&query={{data.query}}">
            <button class="button-orden">ORDENAR DE MENOR A MAYOR PRECIO ⬇</button>
        </a>
        <a href="/api/products?page={{data.page}}&limit={{data.limit}}&sort=desc&query={{data.query}}">
            <button class="button-orden">ORDENAR DE MAYOR A MENOR PRECIO ⬆</button>
        </a>
        <a href="/api/products?page={{data.page}}&limit={{data.limit}}&sort=&query={{data.query}}">
            <button class="button-orden">ORDEN PREDETERMINADO ⬌</button>
        </a>

        {{#if data.hasNextPage}}
            <a href="/api/products?page={{data.nextPage}}&limit={{data.limit}}&sort={{data.sort}}&query={{data.query}}">
                <button class="button-siguiente-atras">SIGUIENTE ▶️</button>
            </a>
        {{/if}}

        <p>
            Página
            <span id="page">{{data.page}}</span>
            de
            <span id="total-pages">{{data.totalPages}}</span>
            <br />
            <span>{{data.totalDocs}}</span>
            Documentos
        </p>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        // Función para incrementar la cantidad
        function incrementarCantidad(productId, stock) {
            const quantityElement = document.getElementById(`quantity-${productId}`);
            const currentQuantity = parseInt(quantityElement.textContent);

            if (currentQuantity < stock) {
                quantityElement.textContent = currentQuantity + 1;
            } else {
                Swal.fire({
                    title: 'Error',
                    text: 'No puedes agregar más de lo disponible en stock',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        // Función para decrementar la cantidad
        function decrementarCantidad(productId) {
            const quantityElement = document.getElementById(`quantity-${productId}`);
            let currentQuantity = parseInt(quantityElement.textContent);

            if (currentQuantity > 1) {
                currentQuantity--;
                quantityElement.textContent = currentQuantity;
            }
        }

        // Función para agregar un producto al carrito
        function agregarAlCarrito(productId, title, price) {
            const quantityElement = document.getElementById(`quantity-${productId}`);
            const quantity = parseInt(quantityElement.textContent);

            fetch(`/cart/add/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ quantity })
            })
            .then(response => {
                if (response.ok) {
                    console.log('Producto agregado al carrito');
                    Swal.fire({
                        title: 'Producto Agregado',
                        text: `Has agregado ${title} al carrito.`,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                    socket.emit('updateCart');
                    quantityElement.textContent = '1'; // Reiniciar la cantidad a 1 después de agregar al carrito
                } else {
                    response.json().then(data => {
                        Swal.fire({
                            title: 'Error',
                            text: data.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
                }
            })
            .catch(error => {
                console.error('Error al agregar el producto al carrito:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'Hubo un problema al agregar el producto al carrito.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            });
        }

        // Función para eliminar un producto
        function eliminarProducto(productId) {
            fetch(`/api/products/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    socket.emit('deleteProduct', productId);
                    document.getElementById(`product-${productId}`).remove();
                    console.log('Producto eliminado');
                } else {
                    response.json().then(data => {
                        Swal.fire({
                            title: 'Error',
                            text: data.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
                }
            })
            .catch(error => {
                console.error('Error al eliminar el producto:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'Hubo un problema al eliminar el producto.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            });
        }

        // Escuchar eventos de actualización de productos
        socket.on('updateProducts', (product) => {
            const productsList = document.getElementById('products-list');
            // Crear el HTML del nuevo producto
            const newProduct= `
                <li id="product-${updatedProduct._id}">
                    <div class="product-title">${updatedProduct.title}</div>
                    <img src="${updatedProduct.image}" alt="${updatedProduct.title}" class="product-image">
                    <div class="product-description">${updatedProduct.description}</div>
                    <div class="product-price">Precio: $${updatedProduct.price}</div>
                    <div>Código: ${updatedProduct.code}</div>
                    <div class="product-stock">Stock: <span id="stock-${updatedProduct._id}">${updatedProduct.stock}</span></div>
                    <div class="product-category">Categoría: ${updatedProduct.category}</div>
                    <div class="product-buttons">
                        <div class="quantity-control">
                            <button class="decrement-button" onclick="decrementarCantidad('${updatedProduct._id}')">-</button>
                            <span class="space" id="quantity-${updatedProduct._id}">1</span>
                            <button class="increment-button" onclick="incrementarCantidad('${updatedProduct._id}', ${updatedProduct.stock})">+</button>
                        </div>
                        <button class="green-button" onclick="agregarAlCarrito('${updatedProduct._id}', '${updatedProduct.title}', ${updatedProduct.price})">Agregar al carrito</button>
                        <button onclick="eliminarProducto('${updatedProduct._id}')">Eliminar</button>
                    </div>
                </li>
            `;
        });

        socket.on('deleteProduct', (productId) => {
            document.getElementById(`product-${productId}`).remove();
            console.log('Producto eliminado');
        });
    </script>
</body>
</html>
